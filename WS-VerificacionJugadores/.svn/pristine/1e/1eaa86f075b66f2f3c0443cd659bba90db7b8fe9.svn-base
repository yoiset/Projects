package es.gob.cnjuego.ws.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import oracle.net.aso.d;

import org.apache.log4j.Logger;

import es.gob.cnjuego.ws.dao.DNIDebugIdentidadDAO;
import es.gob.cnjuego.ws.dao.JugadoresOperadorDAO;
import es.gob.cnjuego.ws.dao.VerificacionDao;
import es.gob.cnjuego.ws.entity.JugadoresCambioRGIAJEntity;
import es.gob.cnjuego.ws.entity.JugadoresOperador;
import es.gob.cnjuego.ws.entity.OperadorEntity;
import es.gob.cnjuego.ws.util.Constantes;
import es.gob.cnjuego.ws.util.validation.ValidadorNIF;
import es.gob.cnjuego.ws.verificacionjugadores.Baja;
import es.gob.cnjuego.ws.verificacionjugadores.CodigosVerificacion;
import es.gob.cnjuego.ws.verificacionjugadores.ResultadoType;

/**
 * Servicio para gestionar la Tabla Jugadores Operador y Debug Identidades. CACHE
 * 
 * @author ylopezconnectis
 * 
 */
public class GestionJugadoresService {

	private JugadoresOperadorDAO jugadoresOperadorDAO;
	private DNIDebugIdentidadDAO dniDebugIdentidadDAO;
	private VerificacionDao verificacionDao;

	Logger log = Logger.getLogger(GestionJugadoresService.class);

	public void almacenarConsultaJugador(OperadorEntity operador, String nif, String nombre,
			String apellido1, String apellido2, Date fNacimiento, int identidad, int rgiaj,
			String res_rgiaj, String res_identidad, int idPeticion, boolean validado, String numSoporte) {
		JugadoresOperador jugadoresOperador = new JugadoresOperador();
		jugadoresOperador.setDni(nif);
		jugadoresOperador.setNombre(nombre);
		jugadoresOperador.setApellido1(apellido1);
		jugadoresOperador.setApellido2(apellido2);
		if (fNacimiento != null)
			jugadoresOperador.setFechaNac(fNacimiento);
		jugadoresOperador.setFechaAlta(new Date());
		jugadoresOperador.setOperador(operador);
		jugadoresOperador.setIndicadorIDentidad(identidad);
		jugadoresOperador.setIndicadorRGIAJ(rgiaj);
		jugadoresOperador.setResultadoIdentidad(res_identidad);
		if (res_identidad != null
				&& res_identidad.equals(CodigosVerificacion.COD_IDENTIDAD_CORRECTA_CACHE)) {
			jugadoresOperador.setResultadoIdentidad(CodigosVerificacion.COD_IDENTIDAD_CORRECTA);
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_CONCACHE);
		} else if (res_identidad != null
				&& res_identidad.equals(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_CACHE)) {
			jugadoresOperador.setResultadoIdentidad(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA);
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_CONCACHE);
		} else if (res_identidad != null
				&& res_identidad.equals(CodigosVerificacion.COD_IDENTIDAD_CORRECTA_TEST)) {
			jugadoresOperador.setResultadoIdentidad(CodigosVerificacion.COD_IDENTIDAD_CORRECTA);
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_NOCACHE_TEST);
		} else if (res_identidad != null
				&& res_identidad.equals(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_TEST)) {
			jugadoresOperador.setResultadoIdentidad(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA);
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_NOCACHE_TEST);
		} else if (res_identidad != null
				&& res_identidad.equals(CodigosVerificacion.COD_NO_VERIFICACION_IDENTIDAD_TEST)) {
			jugadoresOperador
					.setResultadoIdentidad(CodigosVerificacion.COD_NO_VERIFICACION_IDENTIDAD);
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_NOCACHE_TEST);
		}
		if (!validado)
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_NOCACHE_VALIDACION);

		jugadoresOperador.setResultadoRGIAJ(res_rgiaj);
		jugadoresOperador.setPeticionWSId(idPeticion);
		
		if(numSoporte!=null){
			numSoporte=numSoporte.trim();
			if(numSoporte.length()>15)
				numSoporte=numSoporte.substring(0, 14);
		    jugadoresOperador.setNumSoporte(numSoporte);	
		}
		
		
		jugadoresOperadorDAO.almacenarJugadorOperador(jugadoresOperador);

	}
	
	/* Si el NIF está en la tabla de no cacheo se devuelve false */
	public boolean esCacheable(String nif){
		
		List<String> listaNif = dniDebugIdentidadDAO.getListaDebugIdentidades();
		
		if (listaNif.contains(nif)){
			return false;
		} else {
			return true;	
		}
		
	}

	
	public String identidadJugadorCache(String nif, Date fechaNac, String nombre, String apellido1,	String apellido2, String numSoporte) throws Exception {
		String res = null;
		JugadoresOperador jugador = null;
		try {
			   jugador = jugadoresOperadorDAO.existeJugadorIdentificado(nif, nombre, apellido1, apellido2, fechaNac,null);  
		       if(jugador!=null) res=CodigosVerificacion.COD_IDENTIDAD_CORRECTA_CACHE;

		} catch (Exception ex) {
			log.error("GestionJugadoresService.identidadJugadorCache(): Error al consultar el cache de identidad de jugador",ex);
			throw ex;
		}
        
		return res;
	}
	
	
	/** Genera una Baja a partir de la relacion del DNI y el Operador asociado
	 * @param operador
	 * @param dni
	 * @param causa
	 * @return
	 */
	public ResultadoType getBaja(OperadorEntity operador, String dni){
		JugadoresOperador entity= jugadoresOperadorDAO.getDNIOperadorRGIAJ(operador, dni);  // Devuelve si el DNI esta asociado a ese Operador. El más actual
		if(entity==null)
			return new ResultadoType(CodigosVerificacion.COD_BAJA_DNI_NO_ACTIVADO, CodigosVerificacion.DESC_ERROR_BAJA_DNI_NO_ACTIVADO);
		
		if(jugadoresOperadorDAO.getBajaDNIOperadorRGIAJ(operador, dni, entity.getFechaAlta())!=null)  // Pregunta si está dado de baja
			return new ResultadoType(CodigosVerificacion.COD_BAJA_DNI_BAJA, CodigosVerificacion.DESC_ERROR_BAJA_DNI_BAJA);
		
		return new ResultadoType(CodigosVerificacion.COD_BAJA_OK, CodigosVerificacion.DESC_BAJA_OK);
	}
	
	
	
	

	public JugadoresOperadorDAO getJugadoresOperadorDAO() {
		return jugadoresOperadorDAO;
	}

	public void setJugadoresOperadorDAO(JugadoresOperadorDAO jugadoresOperadorDAO) {
		this.jugadoresOperadorDAO = jugadoresOperadorDAO;
	}

	public DNIDebugIdentidadDAO getDniDebugIdentidadDAO() {
		return dniDebugIdentidadDAO;
	}

	public void setDniDebugIdentidadDAO(DNIDebugIdentidadDAO dniDebugIdentidadDAO) {
		this.dniDebugIdentidadDAO = dniDebugIdentidadDAO;
	}
	
	/** Retorna la lista de Peticiones por DNI y operador realizadas en el dia y que han fallado (COD005)
	 * @param operador
	 * @param dni
	 * @return
	 */
	public List<JugadoresOperador> listaPeticionesFallidos( OperadorEntity operador, String dni){
		  
		 return jugadoresOperadorDAO.listaPeticionesFallidos(operador, dni);
	}
	
	/** Almacena la Baja en Jugadores_Operador con DNI, COD, FECHA ALTA, Indicador RGIAJ= 5
	 * @param operador
	 * @param dni
	 * @param type
	 */
	public void almacenarBaja(OperadorEntity operador,Baja bajaJugador, ResultadoType type,  int idPeticion){
		log.debug("Almacenando Baja en Jugadores_Operador con IdPeticion: " +idPeticion + "  Operador: " + operador.getIdOperador() + "  DNI: " + bajaJugador.getDni());
		JugadoresOperador entity=new JugadoresOperador();
		entity.setOperador(operador);
		String dni=bajaJugador.getDni();
		if(dni.length()>9)
			dni=dni.substring(0, 9);
		
		entity.setDni(dni);
		entity.setPeticionWSId(idPeticion);
		
		if(bajaJugador.getCausa().equalsIgnoreCase("R"))
		 entity.setIndicadorRGIAJ(6);
		else  entity.setIndicadorRGIAJ(5); // Causa es 'R'
		
		entity.setResultadoRGIAJ(type.getCodigo());
		entity.setFechaAlta(new Date());
		jugadoresOperadorDAO.almacenarJugadorOperador(entity);
		
		
	}
	
	
	/**
	 * @param operador
	 * @param dni
	 */
	public void actualizarBajaRIAGJ(OperadorEntity operador, String dni){
		 JugadoresCambioRGIAJEntity entity=verificacionDao.getJugadorOperador(operador.getIdOperador(), dni);		
		 
		 if(entity!=null){	          
			 Calendar calendar= Calendar.getInstance();
			 calendar.set(Calendar.MILLISECOND, 0);
			 calendar.set(Calendar.SECOND, 0);
			 calendar.set(Calendar.MINUTE, 0);
			 calendar.set(Calendar.HOUR_OF_DAY, calendar.get(Calendar.HOUR_OF_DAY) + 1 );
		     
			 entity.setEvento("X");
			 entity.setFechaValor(calendar.getTime());
			 verificacionDao.updateJugadorOperador(entity);
			 
			 log.info("Actualizada la Baja en el RGIAJ con DNI: " + entity.getDni() + " Operador: " + operador.getIdOperador());
		 }
	}

	public void setVerificacionDao(VerificacionDao verificacionDao) {
		this.verificacionDao = verificacionDao;
	}
	
	

}
