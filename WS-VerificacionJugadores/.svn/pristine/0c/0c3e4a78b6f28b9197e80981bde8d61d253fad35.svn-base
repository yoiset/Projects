package es.gob.cnjuego.ws.service;



import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import es.gob.cnjuego.ws.entity.OperadorEntity;
import es.gob.cnjuego.ws.util.CodigoEstadoSCSP;
import es.gob.cnjuego.ws.util.Constantes;
import es.gob.cnjuego.ws.util.UtilSupport;
import es.gob.cnjuego.ws.verificacionjugadores.CodigosVerificacion;
import es.gob.cnjuego.ws.verificacionjugadores.Jugador;
import es.gob.cnjuego.ws.verificacionjugadores.ResultadoIdentidad;
import es.gob.cnjuego.ws.verificacionjugadores.ResultadoType;
import es.gob.cnjuego.ws.verificacionjugadores.control.validacion.ValidadorJugador;

/** Servicio enfocado la funcionalidad de Identidad. Llama a los servicio ServicioGestionJugadores (cache) y ServicioJugadoresTestWS (Prueba) y WebServices de la Policia
 * @author ylopezconnectis
 *
 */
@Service(value="servicioIdentidad")
public class ServicioIdentidadImpl implements ServicioIdentidad {

	Logger log = Logger.getLogger(ServicioIdentidadImpl.class);
	
	
	@Autowired
	private ServicioGestionJugadores gestionJugadores;
	
	@Autowired
	private ServicioJugadoresTestWS servicioJugadoresTestWS;
	
	
	
	@Override
	public CodigoEstadoSCSP consultarIdentidadUsuario(String nif, String nombre, String apellido1, String apellido2, Date fechaNacimiento) throws Exception
	{
		CodigoEstadoSCSP res = null;
		try {
// TODO Descomentar			res = AccesoSCSP.getInstance().verificarIdentidad(nif, nombre, apellido1, apellido2, fechaNacimiento);
			
//			if (AccesoSCSP.getInstance().verificarIdentidad(nif, nombre, apellido1, apellido2, fechaNacimiento))
//				res = CodigosVerificacion.COD_IDENTIDAD_CORRECTA;
//			else
//				res = CodigosVerificacion.COD_IDENTIDAD_INCORRECTA;

		}catch(Exception ex)
		{
			throw ex;
		}
		return res;
	}
	
	
	@Override
	public CodigoEstadoSCSP consultarIdentidadUsuarioConCache(String nif, String nombre, String apellido1, String apellido2, Date fechaNacimiento) throws Exception
	{
		CodigoEstadoSCSP res = new CodigoEstadoSCSP();
		String ident = null;
		try {
			ident = gestionJugadores.identidadJugadorCache(nif,fechaNacimiento,nombre,apellido1,apellido2);
			if (ident != null){
				res.setCodigo(ident);
				res.setDescripcion(CodigosVerificacion.getDescripcion(ident));
			}
			else { 
// TODO Descomentar				res = AccesoSCSP.getInstance().verificarIdentidad(nif, nombre, apellido1, apellido2, fechaNacimiento);
//				if (AccesoSCSP.getInstance().verificarIdentidad(nif, nombre, apellido1, apellido2, fechaNacimiento).getCodigo().equals(CodigoEstadoSCSP.SCSP_ESTADO_RES)))
//					res = CodigosVerificacion.COD_IDENTIDAD_CORRECTA;
//				else
//					res = CodigosVerificacion.COD_IDENTIDAD_INCORRECTA;
			}
			
		}catch(Exception ex)
		{
			log.error("ServicioIdentidadImpl.consultarIdentidadUsuarioConCache(): Error al consultar identidad",ex);
			throw ex;
		}
		return res;
	}
	
	private ResultadoIdentidad obtenerResultadoIdentidad(Jugador jugador) {
		
		ResultadoIdentidad result=new ResultadoIdentidad();		
		ResultadoType res = new ResultadoType();
		
		result.setResultadoIdentidad(res);
		result.setDni(jugador.getDni());
		
		try {
			//Comprobacion modo debug identidad
			String debugIdentidad = UtilSupport.getConfiguracion(Constantes.PROP_MODO_DEBUG_IDENTIDAD);///Propiedades.getInstance().getPropiedad(PROP_MODO_DEBUG_IDENTIDAD);
			CodigoEstadoSCSP codigo= new CodigoEstadoSCSP(); 
			boolean cache = true;
			//modo debug identidad desactivado, se emplea cache
			if (debugIdentidad == null ||debugIdentidad.equals("") || debugIdentidad.equals("false") ){
				if (!ValidadorJugador.todosCaracteresAlfanumericos(jugador))
					cache = false;
				}
			else if (debugIdentidad.equals("true")){
				if (UtilSupport.getListDniPrueba(Constantes.CACHE_KEY_DNI_PRUEBA) == null)
					UtilSupport.initDebugIdentidad();
				Collection<String> dniPrueba = UtilSupport.getListDniPrueba(Constantes.CACHE_KEY_DNI_PRUEBA);//(Collection<String>)Cache.getInstancia().get(Constantes.CACHE_KEY_DNI_PRUEBA);
				
				if (dniPrueba != null && !dniPrueba.isEmpty() && dniPrueba.contains(jugador.getDni()))
					cache=false;
				else if (!ValidadorJugador.todosCaracteresAlfanumericos(jugador))
					cache = false;
//					
			}
			log.debug("VerificacionJugadoresControlBean.obtenerResultadoIdentidad() - Procediendo a verificar identidad de usuario: " + jugador.getDni() + " con cache = " + cache);
			if (cache)
				codigo = consultarIdentidadUsuarioConCache(jugador.getDni(),jugador.getNombre(), 
						jugador.getApellido1(), jugador.getApellido2(), jugador.getFechaNacimiento());
			else
				codigo = consultarIdentidadUsuario(jugador.getDni(),jugador.getNombre(), 
						jugador.getApellido1(), jugador.getApellido2(), jugador.getFechaNacimiento());
					
			
			
			res.setCodigo(codigo.getCodigo());
			res.setDescripcion(codigo.getDescripcion());
			

		}catch(Exception ex)
		{
			log.debug("No se ha podido verificar la identidad", ex);
			res.setCodigo(CodigosVerificacion.COD_NO_VERIFICACION_IDENTIDAD);
			res.setDescripcion(CodigosVerificacion.DESC_NO_VERIFICACION_IDENTIDAD);
		}
		return result;
	
	}


	
	
	@Override
	public ResultadoIdentidad consultarIdentidadUsuario(OperadorEntity operador, Jugador jugador) {
        ResultadoIdentidad result=null;
        
		switch (operador.getModeEnabled()) {
		 case 1:  // Habilitado para Prueba
			 return result=servicioJugadoresTestWS.obtenerResultadoIdentidadTestWS(jugador);
			
         case 2:  // Habilitado para Producción
        	 return result=obtenerResultadoIdentidad(jugador);
			
         case 3:  // Habilitado para Pruebas y Producción
        	 result=servicioJugadoresTestWS.obtenerResultadoIdentidadTestWS(jugador);
        	 // Si no esta en la Tabla de Pruebas se le pide al servicio de la Poly
        	 if(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_TEST.equals( result.getResultadoIdentidad().getCodigo())) 
        		 result=obtenerResultadoIdentidad(jugador);
        	 return result;

		default:
			break;
		}
		
		return result;
	}	
	

	
	
	
}
