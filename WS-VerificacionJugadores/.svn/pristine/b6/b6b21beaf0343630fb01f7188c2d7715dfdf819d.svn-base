package es.gob.cnjuego.ws.verificacionjugadores.control;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;

import es.gob.cnjuego.ws.entity.OperadorEntity;
import es.gob.cnjuego.ws.service.GestionJugadoresService;
import es.gob.cnjuego.ws.service.JugadoresTestService;
import es.gob.cnjuego.ws.util.CodigoEstadoSCSP;
import es.gob.cnjuego.ws.util.Constantes;
import es.gob.cnjuego.ws.util.validation.ValidadorNIF;
import es.gob.cnjuego.ws.verificacionjugadores.ClienteJuegoDniService;
import es.gob.cnjuego.ws.verificacionjugadores.ClienteSCSPService;
import es.gob.cnjuego.ws.verificacionjugadores.CodigosVerificacion;
import es.gob.cnjuego.ws.verificacionjugadores.Jugador;
import es.gob.cnjuego.ws.verificacionjugadores.ResultadoIdentidad;
import es.gob.cnjuego.ws.verificacionjugadores.ResultadoJugador;
import es.gob.cnjuego.ws.verificacionjugadores.ResultadoRGIAJ;
import es.gob.cnjuego.ws.verificacionjugadores.ResultadoType;
import es.gob.cnjuego.ws.verificacionjugadores.VerificacionDao;
import es.gob.cnjuego.ws.verificacionjugadores.VerificarIdentidadFault;
import es.gob.cnjuego.ws.verificacionjugadores.VerificarIdentidadFault_Exception;
import es.gob.cnjuego.ws.verificacionjugadores.VerificarJugadorFault_Exception;
import es.gob.cnjuego.ws.verificacionjugadores.VerificarRGIAJFault;
import es.gob.cnjuego.ws.verificacionjugadores.VerificarRGIAJFault_Exception;
import es.gob.cnjuego.ws.verificacionjugadores.control.validacion.ValidadorJugador;

public class VerificacionJugadoresController {

	private Logger log = Logger.getLogger(VerificacionJugadoresController.class);

	// Operador y Lista de jugadores se asignan en el momento de creaci�n del
	// controller
	private OperadorEntity operador;
	private List<Jugador> jugadores;

	// DAOs y Services a los que se accede
	private VerificacionDao verificacionDao;
	private ClienteJuegoDniService clienteJuegoDniService;
	private ClienteSCSPService clienteSCSPService;
	private GestionJugadoresService gestionJugadoresService;
	private JugadoresTestService jugadoresTestService;

	/**
	 * @param operador
	 * @param jugadores
	 * @throws VerificarJugadorFault_Exception
	 */
	public VerificacionJugadoresController(OperadorEntity operador, List<Jugador> jugadores)
			throws VerificarJugadorFault_Exception {
		super();
		if ((operador == null) || (jugadores == null)) {
			throw new VerificarJugadorFault_Exception();
		}

		this.operador = operador;
		this.jugadores = jugadores;
	}

	/**
	 * Constructor utilizado para la operaci�n VerificarIdentidad
	 * 
	 * @param operador
	 * @param jugadores
	 * @param gestionJugadoresService
	 * @param clienteSCSPService
	 * @param jugadoresTestService
	 * @param verificacionDao
	 * @throws VerificarJugadorFault_Exception
	 */
	public VerificacionJugadoresController(OperadorEntity operador, List<Jugador> jugadores,
			GestionJugadoresService gestionJugadoresService, ClienteSCSPService clienteSCSPService,
			JugadoresTestService jugadoresTestService, VerificacionDao verificacionDao)
			throws VerificarJugadorFault_Exception {
		super();
		log.debug("Creando controlador para Verificaci�nIdentidad");
		if ((operador == null) || (jugadores == null)) {
			throw new VerificarJugadorFault_Exception();
		}

		this.operador = operador;
		this.jugadores = jugadores;
		this.clienteSCSPService = clienteSCSPService;
		this.gestionJugadoresService = gestionJugadoresService;
		this.jugadoresTestService = jugadoresTestService;
		this.verificacionDao = verificacionDao;
	}

	/**
	 * Constructor utilizado para la operaci�n VerificarRGIAJ
	 * 
	 * @param operador
	 * @param jugadores
	 * @param gestionJugadoresService
	 * @param clienteJuegoDniService
	 * @param jugadoresTestService
	 * @param verificacionDao
	 * @throws VerificarJugadorFault_Exception
	 */
	public VerificacionJugadoresController(OperadorEntity operador, List<Jugador> jugadores,
			GestionJugadoresService gestionJugadoresService,
			ClienteJuegoDniService clienteJuegoDniService,
			JugadoresTestService jugadoresTestService, VerificacionDao verificacionDao)
			throws VerificarJugadorFault_Exception {
		super();
		log.debug("Creando controlador para Verificaci�nRGIAJ");
		if ((operador == null) || (jugadores == null)) {
			throw new VerificarJugadorFault_Exception();
		}

		this.operador = operador;
		this.jugadores = jugadores;
		this.clienteJuegoDniService = clienteJuegoDniService;
		this.gestionJugadoresService = gestionJugadoresService;
		this.jugadoresTestService = jugadoresTestService;
		this.verificacionDao = verificacionDao;
	}

	/* DGB */
	/**
	 * Constructor utilizado para la operaci�n VerificarJuego
	 * 
	 * @param operador
	 * @param jugadores
	 * @throws VerificarJugadorFault_Exception
	 */
	public VerificacionJugadoresController(OperadorEntity operador, List<Jugador> jugadores,
			GestionJugadoresService gestionJugadoresService, ClienteSCSPService clienteSCSPService,
			ClienteJuegoDniService clienteJuegoDniService,
			JugadoresTestService jugadoresTestService, VerificacionDao verificacionDao)
			throws VerificarJugadorFault_Exception {
		super();
		log.debug("Creando controlador para Verificaci�nJugadores");
		if ((operador == null) || (jugadores == null)) {
			throw new VerificarJugadorFault_Exception();
		}

		this.operador = operador;
		this.jugadores = jugadores;
		this.clienteJuegoDniService = clienteJuegoDniService;
		this.clienteSCSPService = clienteSCSPService;
		this.gestionJugadoresService = gestionJugadoresService;
		this.jugadoresTestService = jugadoresTestService;
		this.verificacionDao = verificacionDao;
	}

	/**
	 * Chequea el estado del Operador. Que no est� deshabilitado @ 0: Operador
	 * deshabilitado @ 1: Operador con peticiones de jugador para prueba @ 2:
	 * Operador con peticiones de jugador reales @ 3: Operador con ambos tipos
	 * de peticiones, reales y prueba
	 * 
	 * @param operador
	 * @throws VerificarIdentidadFault_Exception
	 */
	public void checkDesabilitado() throws Exception {
		log.debug("Chequeo de operador deshabilitado");
		if (operador.getModeEnabled() == 0) {
			log.debug("Operador deshabilitado");
			VerificarIdentidadFault fault2 = new VerificarIdentidadFault();
			fault2.setVerificarIdentidadFault(CodigosVerificacion.ERROR_OPERADOR_INCORRECTO);
			throw new VerificarIdentidadFault_Exception(
					CodigosVerificacion.DESC_ERROR_OPERADOR_INCORRECTO, fault2);
		}
	}

	/**
	 * Chequea la existencia de jugadores repetidos en la lista
	 * 
	 * @throws Exception
	 */
	public void checkJugadoresRepetidos() throws Exception {
		log.debug("Chequeo de jugadores repetidos en la lista proporcionada");
		List<String> dniList = new ArrayList<String>();
		for (Jugador jugador : jugadores) {
			if (dniList.contains(jugador.getDni().toUpperCase())) {
				log.debug("Hay jugadores repetidos");
				VerificarIdentidadFault fault = new VerificarIdentidadFault();
				fault.setVerificarIdentidadFault(CodigosVerificacion.ERROR_JUGADORES_DUPLICADOS);
				log.error("checkJugadoresRepetidos: Se han encontrado identificadores de jugador repetidos, la peticion no es valida");
				throw new VerificarIdentidadFault_Exception(
						CodigosVerificacion.DESC_ERROR_JUGADORES_DUPLICADOS, fault);
			}
			dniList.add(jugador.getDni().toUpperCase());
		}
	}

	/**
	 * Validaci�n del formato de DNI-NIE, Nombre, apellidos y Fecha Nacimiento.
	 * Validaci�n de los jugadores (SVDI o Pruebas) seg�n el estado del Operador
	 * 
	 * @return
	 * @throws VerificarIdentidadFault_Exception
	 */
	public List<ResultadoIdentidad> verificarIdentidad() throws VerificarIdentidadFault_Exception {
		List<ResultadoIdentidad> listaResultado = new ArrayList<ResultadoIdentidad>();
		List<ResultadoIdentidad> listaErrores = new ArrayList<ResultadoIdentidad>();
		List<ResultadoIdentidad> listaPruebas = new ArrayList<ResultadoIdentidad>();
		ResultadoIdentidad resIdentidad = null;

		log.debug("Verificar Identidad: comienzo de la verificaci�n");
		
		ValidadorJugador.setVerificacionDao(this.verificacionDao);

		for (Jugador jugador : jugadores) {
			boolean hayError = false;
			boolean hayPruebas = false;

			// Formatear Datos
			ValidadorJugador.formateaDatosJugador(jugador);

			// Valida los datos del jugador
			if (ValidadorJugador.validarJugador(jugador) == CodigosVerificacion.COD_FORMATO_INCORRECTO) {
				log.debug("Formato incorrecto de jugador");
				listaErrores.add(this.generarResultadoIdentidadInvalido(jugador, CodigosVerificacion.COD_FORMATO_INCORRECTO));
				hayError = true;
			} else if (ValidadorJugador.validarJugador(jugador) == CodigosVerificacion.COD_CARACTERES_INVALIDOS) {
				log.debug("Caracteres inv�lidos en jugador");
				listaErrores.add(this.generarResultadoIdentidadInvalido(jugador, CodigosVerificacion.COD_CARACTERES_INVALIDOS));
				hayError = true;
			}

			// Se comprueba que el NIF o NIE es correcto
			if (!hayError && !ValidadorNIF.isNifNie(jugador.getDni())) {
				log.debug("DNI incorrecto: "+jugador.getDni());
				listaErrores.add(this.generarResultadoIdentidadInvalido(jugador, CodigosVerificacion.COD_FORMATO_INCORRECTO));
				hayError = true;
			}

			if (!hayError
					&& (jugador.getApellido1().isEmpty() || jugador.getNombre().isEmpty() || (jugador.getFechaNacimiento() == null))) {
				log.debug("Faltan campos por rellenar en DNI");
				listaErrores.add(this.generarResultadoIdentidadInvalido(jugador, CodigosVerificacion.COD_FORMATO_INCORRECTO));
				hayError = true;
			}

			// Si es NIF es obligatorio que vengan rellenos todos los datos
			if (!hayError && ValidadorNIF.isNifOrNie(jugador.getDni())
					&& jugador.getApellido2().isEmpty()) {
				log.debug("Es NIF y es obligatorio el segundo apellido");
				listaErrores.add(this.generarResultadoIdentidadInvalido(jugador, CodigosVerificacion.COD_FORMATO_INCORRECTO));
				hayError = true;
			}

			// Si el operador utiliza datos de prueba o datos de prueba y reales
			// se comprueban los usuarios en la BD
			if (!hayError && ((operador.getModeEnabled() == Constantes.OP_HABILITADO_PRU)
					|| (operador.getModeEnabled() == Constantes.OP_HABILITADO_PRU_PRO))) {

				ResultadoIdentidad resJugador = null;

				log.debug("Operador permite usuarios de prueba (modo: "+operador.getModeEnabled()+")");
				try {
					resJugador = this.getJugadoresTestService().obtenerResultadoIdentidadTestWS(operador.getModeEnabled(), jugador);
					if (resJugador != null) {
						log.debug("Es usuario de prueba: "+jugador.getDni());
						listaPruebas.add(resJugador);
						hayPruebas = true;
					}
				} catch (Exception ex) {
					throw new VerificarIdentidadFault_Exception("Error interno",
							new VerificarIdentidadFault());
				}
			}

			if (!hayError && !hayPruebas && (operador.getModeEnabled() == Constantes.OP_HABILITADO_PRU)){
				// El operador es de pruebas pero el usuario es de produccion se da como invalido
				listaPruebas.add(this.generarResultadoIdentidadInvalido(jugador, CodigosVerificacion.COD_IDENTIDAD_CORRECTA_TEST));
				hayPruebas = true;
			}
			
			resIdentidad = new ResultadoIdentidad();

			// Si el jugador no dio error en las comprobaciones y no es de
			// prueba se verifica su identidad
			if (!hayError && !hayPruebas) {

				log.debug("Es usuario real: "+jugador.getDni());
				// S�lo buscamos en cach� si no se cumple que est� activado el
				// debug y el DNI est� en la tabla de no cachear
				if (!((this.getVerificacionDao().getValorPropiedad(
						Constantes.PROP_MODO_DEBUG_IDENTIDAD) == "true") && this
						.getGestionJugadoresService().esCacheable(jugador.getDni()))) {
					log.debug ("Se busca en cach�");
					// Buscar primero en la cach�
					String codResultadoBusquedaCache = null;

					try {
						codResultadoBusquedaCache = this.getGestionJugadoresService()
								.identidadJugadorCache(jugador.getDni(),
										jugador.getFechaNacimiento(), jugador.getNombre(),
										jugador.getApellido1(), jugador.getApellido2());
					} catch (Exception e) {
						e.printStackTrace();
					}

					// Si existe en cach� se devuelve el valor
					if (codResultadoBusquedaCache != null) {
						log.debug("Est� en cach�");
						resIdentidad.setDni(jugador.getDni());
						resIdentidad.setResultadoIdentidad(new ResultadoType());
						resIdentidad.getResultadoIdentidad().setCodigo(codResultadoBusquedaCache);
						resIdentidad.getResultadoIdentidad().setDescripcion(CodigosVerificacion.getDescripcion(codResultadoBusquedaCache));
						
						// Si no existe en cach� se busca en el servicio de la
						// polic�a
					} else {
						log.debug("No est� en cach�, se consulta al servicio de la polic�a");
						CodigoEstadoSCSP codigoResultado = null;
						try {
							codigoResultado = this.getClienteSCSPService().verificarIdentidad(
									jugador.getDni(), jugador.getNombre(), jugador.getApellido1(),
									jugador.getApellido2(), jugador.getFechaNacimiento());
						} catch (Exception e) {
							e.printStackTrace();
						}
						resIdentidad.setDni(jugador.getDni());
						resIdentidad.setResultadoIdentidad(new ResultadoType());
						resIdentidad.getResultadoIdentidad().setCodigo(codigoResultado.getCodigo());
						resIdentidad.getResultadoIdentidad().setDescripcion(codigoResultado.getDescripcion());
						
					}

				} else {
					log.debug("No se debe consultar cach�, se consulta al servicio de la polic�a");
					
					// Se comprueba la identidad llamando al servicio
					CodigoEstadoSCSP codigoResultado = null;
					try {
						codigoResultado = this.getClienteSCSPService().verificarIdentidad(
								jugador.getDni(), jugador.getNombre(), jugador.getApellido1(),
								jugador.getApellido2(), jugador.getFechaNacimiento());
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					resIdentidad.setDni(jugador.getDni());
					resIdentidad.setResultadoIdentidad(new ResultadoType());
					resIdentidad.getResultadoIdentidad().setCodigo(codigoResultado.getCodigo());
					resIdentidad.getResultadoIdentidad().setDescripcion(
							codigoResultado.getDescripcion());
				}

				listaResultado.add(resIdentidad);
			}

		}

		listaResultado.addAll(listaErrores);
		listaResultado.addAll(listaPruebas);

		return listaResultado;

	}

	/**
	 * @return listaResultados
	 * @throws VerificarRGIAJFault_Exception
	 */
	public List<ResultadoRGIAJ> verificarRGIAJ() throws VerificarRGIAJFault_Exception {
		List<ResultadoRGIAJ> listaResultado = new ArrayList<ResultadoRGIAJ>();
		List<ResultadoRGIAJ> listaErrores = new ArrayList<ResultadoRGIAJ>();
		List<ResultadoRGIAJ> listaPruebas = new ArrayList<ResultadoRGIAJ>();
		List<String> listaDni = new ArrayList<String>();
		
		log.debug("Verificar RGIAJ: comienzo de la verificaci�n");
		
		ValidadorJugador.setVerificacionDao(this.verificacionDao);

		for (Jugador jugador : jugadores) {
			boolean hayError = false;
			boolean hayPruebas = false;

			// Se formatean los datos del jugador
			ValidadorJugador.formateaDatosJugador(jugador);

			// Valida los datos del jugador
			if (ValidadorJugador.validarJugador(jugador) == CodigosVerificacion.COD_FORMATO_INCORRECTO) {
				log.debug("Formato incorrecto de jugador");
				listaErrores.add(this.generarResultadoRGIAJInvalido(jugador, CodigosVerificacion.COD_FORMATO_INCORRECTO));
				hayError = true;
			} else if (ValidadorJugador.validarJugador(jugador) == CodigosVerificacion.COD_CARACTERES_INVALIDOS) {
				log.debug("Caracteres inv�lidos en jugador");
				listaErrores.add(this.generarResultadoRGIAJInvalido(jugador, CodigosVerificacion.COD_CARACTERES_INVALIDOS));
				hayError = true;
			}

			// Se comprueba que el NIF o NIE es correcto
			if (!hayError && !ValidadorNIF.isNifNie(jugador.getDni())) {
				log.debug("DNI incorrecto: "+jugador.getDni());
				listaErrores.add(this.generarResultadoRGIAJInvalido(jugador, CodigosVerificacion.COD_FORMATO_INCORRECTO));
				hayError = true;
			}

			if (!hayError
					&& (jugador.getApellido1().isEmpty() || jugador.getNombre().isEmpty() || (jugador.getFechaNacimiento() == null))) {
				log.debug("Faltan campos por rellenar en DNI");
				listaErrores.add(this.generarResultadoRGIAJInvalido(jugador, CodigosVerificacion.COD_FORMATO_INCORRECTO));
				hayError = true;
			}

			// Si es NIF es obligatorio que vengan rellenos todos los datos
			if (!hayError 
					&& ValidadorNIF.isNifOrNie(jugador.getDni())
					&& jugador.getApellido2().isEmpty()) {
				log.debug("Es NIF y es obligatorio el segundo apellido");				
				listaErrores.add(this.generarResultadoRGIAJInvalido(jugador, CodigosVerificacion.COD_FORMATO_INCORRECTO));
				hayError = true;
			}

			// Si el operador utiliza datos de prueba o datos de prueba y reales
			// se comprueban los usuarios en la BD
			if (!hayError && ((operador.getModeEnabled() == Constantes.OP_HABILITADO_PRU)
					|| (operador.getModeEnabled() == Constantes.OP_HABILITADO_PRU_PRO))) {

				ResultadoRGIAJ resJugador = null;
				log.debug("Operador permite usuarios de prueba (modo: "+operador.getModeEnabled()+")");
				try {
					resJugador = this.getJugadoresTestService().obtenerResultadoRGIAJTestWS(operador.getModeEnabled(), jugador);
					if (resJugador != null) {
						log.debug("Es usuario de prueba: "+jugador.getDni());
						listaPruebas.add(resJugador);
						hayPruebas = true;
					}
				} catch (Exception ex) {
					throw new VerificarRGIAJFault_Exception("Error interno",
							new VerificarRGIAJFault());
				}
			}

			if (!hayError && !hayPruebas && (operador.getModeEnabled() == Constantes.OP_HABILITADO_PRU)){
				// El operador es de pruebas pero el usuario es de produccion se da como invalido
				listaPruebas.add(this.generarResultadoRGIAJInvalido(jugador, CodigosVerificacion.COD_NO_INSCRITO_RGIAJ));
				hayPruebas = true;
			}
			
			// Si el jugador no dio error en las comprobaciones y no es de
			// prueba a�adimos el DNI en la lista
			// para la consulta de incluidos en RGIAJ
			if (!hayError && !hayPruebas) {
				log.debug("Es usuario real: "+jugador.getDni());
				listaDni.add(jugador.getDni());
			}
		}

		if (!listaDni.isEmpty()) {
			try {
				log.debug("Se consulta al servicio que nos indica si est�n en RGIAJ");
				listaResultado = this.getClienteJuegoDniService().verificarJuegoDni(listaDni);

			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		listaResultado.addAll(listaErrores);
		listaResultado.addAll(listaPruebas);

		return listaResultado;
	}

	/**
	 * @return
	 * @throws VerificarJugadorFault_Exception
	 */
	public List<ResultadoJugador> verificarJugador() throws VerificarJugadorFault_Exception {
		List<ResultadoJugador> listaResultado = new ArrayList<ResultadoJugador>();
		List<ResultadoIdentidad> listaResIdentidad = new ArrayList<ResultadoIdentidad>();
		List<ResultadoRGIAJ> listaResRGIAJ = new ArrayList<ResultadoRGIAJ>();

		log.debug("Verificar Jugador: comienzo de la verificaci�n");
		
		// Se llama a los dos m�todos existentes para verificar la inclusi�n en
		// RGIAJ y su identidad
		// de la lista de jugadores.
		try {
			log.debug("Consultar estado de los jugadores en RGIAJ");
			listaResRGIAJ = this.verificarRGIAJ();
			log.debug("Consultar estado de la identidad de jugadores");
			listaResIdentidad = this.verificarIdentidad();
		} catch (VerificarRGIAJFault_Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (VerificarIdentidadFault_Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		log.debug("Combinar resultados para Verificar Jugador");
		// Se unen ambas listas de resultados en una sola
		for (Jugador jugador : jugadores) {
			ResultadoJugador resultado = new ResultadoJugador();

			resultado.setDni(jugador.getDni());
			resultado.setResultadoRGIAJ(getResultadoRGIAJ(jugador.getDni(), listaResRGIAJ));
			resultado.setResultadoIdentidad(getResultadoIdentidad(jugador.getDni(),
					listaResIdentidad));

			listaResultado.add(resultado);
		}

		return listaResultado;

	}

	/*
	 * Metodo que devuelve el resultado RGIAJ para un DNI de una lista de
	 * resultados RGIAJ
	 */
	private ResultadoType getResultadoRGIAJ(String DNI, List<ResultadoRGIAJ> listaResultados) {
		for (ResultadoRGIAJ resultado : (ArrayList<ResultadoRGIAJ>) listaResultados) {
			if (resultado.getDni().equalsIgnoreCase(DNI)) {
				return resultado.getResultadoRGIAJ();
			}
		}
		return null;
	}

	/*
	 * Metodo que devuelve el resultado RGIAJ para un DNI de una lista de
	 * resultados RGIAJ
	 */
	private ResultadoType getResultadoIdentidad(String DNI, List<ResultadoIdentidad> listaResultados) {
		for (ResultadoIdentidad resultado : (ArrayList<ResultadoIdentidad>) listaResultados) {
			if (resultado.getDni().equalsIgnoreCase(DNI)) {
				return resultado.getResultadoIdentidad();
			}
		}
		return null;
	}

	/**
	 * Registra en la Tabla JugadoresOperadores (Cach�)
	 * 
	 * @param contexto
	 * @param list
	 * @param identidad
	 * @param rgia
	 * @throws Exception
	 */
	public void almacenarJugadoresConsultaRGIAJ(int idPeticion, List<ResultadoRGIAJ> listaResultados)
			throws Exception {
		almacenarConsultaJugadoresOperador(listaResultados, false, true, idPeticion);
	}

	public void almacenarJugadoresConsultaIdentidad(int idPeticion,
			List<ResultadoIdentidad> listaResultados) throws Exception {
		almacenarConsultaJugadoresOperador(listaResultados, true, false, idPeticion);
	}

	public void almacenarJugadoresConsultaJugadores(int idPeticion,
			List<ResultadoJugador> listaResultados) throws Exception {
		almacenarConsultaJugadoresOperador(listaResultados, true, true, idPeticion);
	}

	/**
	 * @param list
	 * @param identidad
	 * @param rgia
	 * @param idPeticion
	 * @throws Exception
	 */
	private void almacenarConsultaJugadoresOperador(List list, boolean identidad, boolean rgia,
			int idPeticion) throws Exception {
		log.debug("Inicio almacenar consulta jugadores");
		if (jugadores != null) {

			for (Jugador jugador : jugadores) {
				if (ValidadorNIF.isNifNie(jugador.getDni())) {
					if (identidad && rgia) {
						log.debug("Almacenar jugador de consulta Verificar Jugadores");
						String res_rgiaj = null;
						String res_identidad = null;
						boolean validado = true;
						int indicador = 1;
						if (!ValidadorJugador.todosCaracteresAlfanumericos(jugador))
							validado = false;
						for (Iterator<ResultadoJugador> iterRes = list.iterator(); iterRes
								.hasNext();) {
							ResultadoJugador resJugador = iterRes.next();
							if (resJugador.getDni().equalsIgnoreCase(jugador.getDni())) {
								res_rgiaj = resJugador.getResultadoRGIAJ().getCodigo();
								res_identidad = resJugador.getResultadoIdentidad().getCodigo();
								if (res_identidad
										.equals(CodigosVerificacion.COD_IDENTIDAD_CORRECTA_CACHE))
									resJugador.getResultadoIdentidad().setCodigo(
											CodigosVerificacion.COD_IDENTIDAD_CORRECTA);
								if (res_identidad
										.equals(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_CACHE))
									resJugador.getResultadoIdentidad().setCodigo(
											CodigosVerificacion.COD_IDENTIDAD_INCORRECTA);
								if (res_identidad
										.equals(CodigosVerificacion.COD_IDENTIDAD_CORRECTA_TEST))
									resJugador.getResultadoIdentidad().setCodigo(
											CodigosVerificacion.COD_IDENTIDAD_CORRECTA);
								if (res_identidad
										.equals(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_TEST))
									resJugador.getResultadoIdentidad().setCodigo(
											CodigosVerificacion.COD_IDENTIDAD_INCORRECTA);
								if (res_identidad
										.equals(CodigosVerificacion.COD_NO_VERIFICACION_IDENTIDAD_TEST))
									resJugador.getResultadoIdentidad().setCodigo(
											CodigosVerificacion.COD_NO_VERIFICACION_IDENTIDAD);

								if (resJugador.getResultadoRGIAJ() != null
										&& resJugador.getResultadoRGIAJ().getCodigo() == "4")
									indicador = 4;

								break;

							}
						}
						
						gestionJugadoresService.almacenarConsultaJugador(operador,
								jugador.getDni(), jugador.getNombre(), jugador.getApellido1(),
								jugador.getApellido2(), jugador.getFechaNacimiento(), indicador,
								indicador, res_rgiaj, res_identidad, idPeticion, validado);
					} else if (identidad) {
						log.debug("Almacenar jugador de consulta Verificar Identidad");
						
						String res_identidad = null;
						boolean validado = true;
						int indicador = 1;
						if (!ValidadorJugador.todosCaracteresAlfanumericos(jugador))
							validado = false;
						for (Iterator<ResultadoIdentidad> iterRes = list.iterator(); iterRes
								.hasNext();) {
							ResultadoIdentidad resIdentidad = iterRes.next();
							if (resIdentidad.getDni().equalsIgnoreCase(jugador.getDni())) {
								res_identidad = resIdentidad.getResultadoIdentidad().getCodigo();
								if (res_identidad
										.equals(CodigosVerificacion.COD_IDENTIDAD_CORRECTA_CACHE))
									resIdentidad.getResultadoIdentidad().setCodigo(
											CodigosVerificacion.COD_IDENTIDAD_CORRECTA);
								if (res_identidad
										.equals(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_CACHE))
									resIdentidad.getResultadoIdentidad().setCodigo(
											CodigosVerificacion.COD_IDENTIDAD_INCORRECTA);
								if (res_identidad
										.equals(CodigosVerificacion.COD_IDENTIDAD_CORRECTA_TEST)) {
									indicador = 4;
									resIdentidad.getResultadoIdentidad().setCodigo(
											CodigosVerificacion.COD_IDENTIDAD_CORRECTA);
								}

								if (res_identidad
										.equals(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_TEST)) {
									indicador = 4;
									resIdentidad.getResultadoIdentidad().setCodigo(
											CodigosVerificacion.COD_IDENTIDAD_INCORRECTA);
								}
								if (res_identidad
										.equals(CodigosVerificacion.COD_NO_VERIFICACION_IDENTIDAD_TEST)) {
									indicador = 4;
									resIdentidad.getResultadoIdentidad().setCodigo(
											CodigosVerificacion.COD_NO_VERIFICACION_IDENTIDAD);
								}

								break;
							}
						}
						gestionJugadoresService.almacenarConsultaJugador(operador,
								jugador.getDni(), jugador.getNombre(), jugador.getApellido1(),
								jugador.getApellido2(), jugador.getFechaNacimiento(), indicador, 0,
								null, res_identidad, idPeticion, validado);
					} else if (rgia) {
						log.debug("Almacenar jugador de consulta Verificar RGIAJ");
						
						String res_rgiaj = null;
						int indicador = 1;
						for (ResultadoRGIAJ resRGIAJ : (ArrayList<ResultadoRGIAJ>) list) {
							if (resRGIAJ.getDni().equalsIgnoreCase(jugador.getDni())) {
								res_rgiaj = resRGIAJ.getResultadoRGIAJ().getCodigo();
								if (resRGIAJ.getResultadoRGIAJ().getCodigo() == "4") {
									indicador = 4;
								} else {
									indicador = 1;
								}
								break;
							}
						}
						gestionJugadoresService.almacenarConsultaJugador(operador,
								jugador.getDni(), jugador.getNombre(), jugador.getApellido1(),
								jugador.getApellido2(), jugador.getFechaNacimiento(), 0, indicador,
								res_rgiaj, null, idPeticion, true);
					}

				}

			}

		}
	}

	/**
	 * @param jugador
	 * @param codError
	 * @return
	 */
	private ResultadoRGIAJ generarResultadoRGIAJInvalido(Jugador jugador, String codError) {
		ResultadoRGIAJ res = new ResultadoRGIAJ();
		res.setDni(jugador.getDni());
		ResultadoType restype = new ResultadoType();
		restype.setCodigo(codError);
		if (CodigosVerificacion.COD_FORMATO_INCORRECTO.equals(codError)){
			restype.setDescripcion(CodigosVerificacion.DESC_FORMATO_INCORRECTO);
		} else if (CodigosVerificacion.COD_CARACTERES_INVALIDOS.equals(codError)){
			restype.setDescripcion(CodigosVerificacion.DESC_CARACTERES_INVALIDOS);
		} else if (CodigosVerificacion.COD_NO_INSCRITO_RGIAJ.equals(codError)){
			restype.setDescripcion(CodigosVerificacion.DESC_NO_INSCRITO_RGIAJ);
		}
		res.setResultadoRGIAJ(restype);

		return res;
	}

	/**
	 * @param jugador
	 * @param codError
	 * @return resultadoIdentidad
	 */
	private ResultadoIdentidad generarResultadoIdentidadInvalido(Jugador jugador, String codError) {
		ResultadoIdentidad res = new ResultadoIdentidad();
		res.setDni(jugador.getDni());
		ResultadoType restype = new ResultadoType();
		restype.setCodigo(codError);
		if (CodigosVerificacion.COD_FORMATO_INCORRECTO.equals(codError)){
			restype.setDescripcion(CodigosVerificacion.DESC_FORMATO_INCORRECTO);
		} else if (CodigosVerificacion.COD_CARACTERES_INVALIDOS.equals(codError)) {
			restype.setDescripcion(CodigosVerificacion.DESC_CARACTERES_INVALIDOS);
		} else if (CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_TEST.equals(codError)) {
			restype.setDescripcion(CodigosVerificacion.DESC_IDENTIDAD_INCORRECTA_TEST);
		}
		res.setResultadoIdentidad(restype);

		return res;
	}
	
	/*
	 * M�todos get y set
	 */

	public ClienteJuegoDniService getClienteJuegoDniService() {
		return clienteJuegoDniService;
	}

	public void setClienteJuegoDniService(ClienteJuegoDniService clienteJuegoDniService) {
		this.clienteJuegoDniService = clienteJuegoDniService;
	}

	public VerificacionDao getVerificacionDao() {
		return verificacionDao;
	}

	public void setVerificacionDao(VerificacionDao verificacionDao) {
		this.verificacionDao = verificacionDao;
	}

	public GestionJugadoresService getGestionJugadoresService() {
		return gestionJugadoresService;
	}

	public void setGestionJugadoresService(GestionJugadoresService gestionJugadoresService) {
		this.gestionJugadoresService = gestionJugadoresService;
	}

	public JugadoresTestService getJugadoresTestService() {
		return jugadoresTestService;
	}

	public void setJugadoresTestService(JugadoresTestService jugadoresTestService) {
		this.jugadoresTestService = jugadoresTestService;
	}

	public ClienteSCSPService getClienteSCSPService() {
		return clienteSCSPService;
	}

	public void setClienteSCSPService(ClienteSCSPService clienteSCSPService) {
		this.clienteSCSPService = clienteSCSPService;
	}

}
