package es.gob.cnjuego.ws.verificacionjugadores.interceptor;

import java.io.ByteArrayOutputStream;
import java.util.Date;

import javax.xml.soap.SOAPMessage;

import org.apache.cxf.binding.soap.SoapMessage;
import org.apache.cxf.binding.soap.saaj.SAAJInInterceptor;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor;
import org.apache.log4j.Logger;

import es.gob.cnjuego.ws.entity.OperadorEntity;
import es.gob.cnjuego.ws.entity.PeticionEntity;
import es.gob.cnjuego.ws.verificacionjugadores.VerificacionDao;

/**
 * Este interceptor guarda el mensaje SOAP serializado en la base de datos.
 * El mensaje se guarda por cuestiones legales y para poder hacer consultas sobre las peticiones
 * recibidas.
 */
public class InterceptorEntradaRegistrarInvocacion extends WSS4JInInterceptor {

	public static String ID_PETICION = "ID_PETICION";
	public static String COD_PETICION = "COD_PETICION";
	private static Logger log = Logger.getLogger(InterceptorEntradaRegistrarInvocacion.class);
	private VerificacionDao dao;

	public void handleMessage(SoapMessage mensaje) throws Fault {
		try {
			PeticionEntity peticion = this.crearPeticion(mensaje);
			this.getDao().agregarPeticion(peticion);
		} catch (Exception e) {
			log.debug("Error guardando la peticion", e);
			e.printStackTrace();
		}
	}

	/**
	 * Retorna un objeto para guardar el mensaje SOAP y el ID del operador correspondiente al
	 * certificado extraído de las cabeceras.
	 * Podría ocurrir que el operador no esté presente, pero aún así debemos guardar la petición.
	 */
	private PeticionEntity crearPeticion(SoapMessage mensaje) throws Exception {
		SOAPMessage doc = this.getSOAPMessage(mensaje);
		// Serializamos el mensaje SOAP
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		doc.writeTo(baos);
		String soapString = new String(baos.toByteArray());
		
		// Recuperamos el operador que fue inyectado por otro interceptor
		OperadorEntity operador = (OperadorEntity)mensaje.getExchange().getInMessage().get(InterceptorEntradaProcesarCertificado.OPERADOR);
		
		// Obtenemos el nombre de la operación que se invoca
		String nombreOperacion = mensaje.getExchange().getBindingOperationInfo().getName().getLocalPart();
		PeticionEntity peticion = new PeticionEntity();
		peticion.setFechaPeticion(new Date());
		peticion.setPeticion(soapString);
		peticion.setCodPeticion(nombreOperacion);
		if (operador != null) {
			peticion.setIdOperador(operador.getIdOperador());
		} else {
			peticion.setIdOperador(null);
		}
		return peticion;
	}
	
    private SOAPMessage getSOAPMessage(SoapMessage mensaje) {
        SAAJInInterceptor.INSTANCE.handleMessage(mensaje);
        return mensaje.getContent(SOAPMessage.class);
    }

	public VerificacionDao getDao() {
		return dao;
	}

	public void setDao(VerificacionDao dao) {
		this.dao = dao;
	}
	
}
