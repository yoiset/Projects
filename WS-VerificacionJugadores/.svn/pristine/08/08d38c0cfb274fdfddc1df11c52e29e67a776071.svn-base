package es.gob.cnjuego.ws.service;

import java.util.Date;

import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import es.gob.cnjuego.ws.dao.JugadoresOperadorDAO;
import es.gob.cnjuego.ws.entity.JugadoresOperador;
import es.gob.cnjuego.ws.entity.OperadorEntity;
import es.gob.cnjuego.ws.util.Constantes;
import es.gob.cnjuego.ws.util.validation.ValidadorNIF;
import es.gob.cnjuego.ws.verificacionjugadores.CodigosVerificacion;


/**  Servicio para gestionar la Tabla Jugadores Operador. CACHE
 * @author ylopezconnectis
 *
 */
@Service(value="servicioGestionJugadores")
public class ServicioGestionJugadoresImpl implements ServicioGestionJugadores
{

	@Autowired
	private JugadoresOperadorDAO jugadoresOperadorDAO;
	
	
	Logger log = Logger.getLogger(ServicioGestionJugadoresImpl.class);
	
	@Override
	public void almacenarConsultaJugador(OperadorEntity operador, String nif, String nombre, String apellido1, String apellido2, Date fNacimiento, int identidad, int rgiaj, String res_rgiaj, String res_identidad, int idPeticion, boolean validado)
	{
		JugadoresOperador jugadoresOperador = new JugadoresOperador();
		jugadoresOperador.setDni(nif);
		jugadoresOperador.setNombre(nombre);
		jugadoresOperador.setApellido1(apellido1);
		jugadoresOperador.setApellido2(apellido2);
		if (fNacimiento != null)
			jugadoresOperador.setFechaNac(fNacimiento);
		jugadoresOperador.setFechaAlta(new Date());
		jugadoresOperador.setOperador(operador);
		jugadoresOperador.setIndicadorIDentidad(identidad);
		jugadoresOperador.setIndicadorRGIAJ(rgiaj);
		jugadoresOperador.setResultadoIdentidad(res_identidad);
		if (res_identidad != null && res_identidad.equals(CodigosVerificacion.COD_IDENTIDAD_CORRECTA_CACHE))
		{
			jugadoresOperador.setResultadoIdentidad(CodigosVerificacion.COD_IDENTIDAD_CORRECTA);
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_CONCACHE);
		}
		else if (res_identidad != null && res_identidad.equals(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_CACHE))
		{
			jugadoresOperador.setResultadoIdentidad(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA);
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_CONCACHE);
		}
		else if (res_identidad != null && res_identidad.equals(CodigosVerificacion.COD_IDENTIDAD_CORRECTA_TEST))
		{
			jugadoresOperador.setResultadoIdentidad(CodigosVerificacion.COD_IDENTIDAD_CORRECTA);
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_NOCACHE_TEST);
		}
		else if (res_identidad != null && res_identidad.equals(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_TEST))
		{
			jugadoresOperador.setResultadoIdentidad(CodigosVerificacion.COD_IDENTIDAD_INCORRECTA);
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_NOCACHE_TEST);
		}
		else if (res_identidad != null && res_identidad.equals(CodigosVerificacion.COD_NO_VERIFICACION_IDENTIDAD_TEST))
		{
			jugadoresOperador.setResultadoIdentidad(CodigosVerificacion.COD_NO_VERIFICACION_IDENTIDAD);
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_NOCACHE_TEST);
		}
		if (!validado)
			jugadoresOperador.setCacheIdentidad(Constantes.CACHE_IDENTIDAD_NOCACHE_VALIDACION);
		
		jugadoresOperador.setResultadoRGIAJ(res_rgiaj);
		jugadoresOperador.setPeticionWSId(idPeticion);
		jugadoresOperadorDAO.almacenarJugadorOperador(jugadoresOperador);
		
	}
	
	@Override
	public String identidadJugadorCache(String nif, Date fechaNac, String nombre, String apellido1, String apellido2) throws Exception
	{
		String res = null;
		JugadoresOperador jugador = null;
		JugadoresOperador jugadorAux = null;
		JugadoresOperador jugadorAux2 = null;
		try {
			//si es un NIE y el apellido2 es nulo, busco con apellido2=nulo, si no, busco apellido2!=nulo
			if (!ValidadorNIF.isNifOrNie(nif) && apellido2 == null)
				jugador = jugadoresOperadorDAO.existeJugadorIdentificado(nif,nombre,apellido1, fechaNac);
			else
				jugador = jugadoresOperadorDAO.existeJugadorIdentificado(nif,nombre,apellido1,apellido2, fechaNac);

			if (jugador != null){
				//si tengo un jugador identificado igual
				//si es un NIF, busco por apellido2
				if (ValidadorNIF.isNifOrNie(nif))
					jugadorAux2 = jugadoresOperadorDAO.existeJugadorIdentificadoConApellido2(nif,fechaNac);
				else{
					//es un NIE, busco en primer lugar sin contar con el apellido2
					jugadorAux = jugadoresOperadorDAO.existeJugadorIdentificadoSinApellido2(nif,fechaNac);
					if (jugadorAux != null){
						// si existe un registro sin contar con el apellido 2
						if (apellido2 != null){
							//si el caso tiene apellido2, valido que coincida con el último, y busco el último que si tenga apellido
							if (jugadorAux.getNombre() != null && jugadorAux.getNombre().equalsIgnoreCase(nombre) &&
									jugadorAux.getApellido1() != null && jugadorAux.getApellido1().equalsIgnoreCase(apellido1))
								jugadorAux2 = jugadoresOperadorDAO.existeJugadorIdentificadoConApellido2(nif,fechaNac);
							else
								//si no coincide con el último sin apellido, voy a devolver que no
								jugadorAux2 = jugadorAux;
						}else
							jugadorAux2 = jugadorAux;
					}else
						if (apellido2 != null)
							jugadorAux2 = jugadoresOperadorDAO.existeJugadorIdentificadoConApellido2(nif,fechaNac);
				}
			}


			if (jugadorAux2 != null){
				if (jugadorAux2.getNombre() != null && jugadorAux2.getNombre().equalsIgnoreCase(nombre) &&
						jugadorAux2.getApellido1() != null && jugadorAux2.getApellido1().equalsIgnoreCase(apellido1) &&
						((apellido2==null) || (jugadorAux2.getApellido2() != null && jugadorAux2.getApellido2().equalsIgnoreCase(apellido2)))){
					//El jugador es el mismo que el último identificado en el cache
					res = CodigosVerificacion.COD_IDENTIDAD_CORRECTA_CACHE;
				}else
					res = CodigosVerificacion.COD_IDENTIDAD_INCORRECTA_CACHE;
			}



		}catch(Exception ex)
		{
			log.error("ServicioGestionJugadoresImpl.identidadJugadorCache(): Error al consultar el cache de identidad de jugador",ex);
			throw ex;
		}

		return res;
	}
}
